{"ast":null,"code":"var _jsxFileName = \"/home/shri/projects/blockchain-app/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport ContractABI from './SimpleStorage.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    const initWeb3 = async () => {\n      if (window.ethereum) {\n        const web3Instance = new Web3(window.ethereum);\n        setWeb3(web3Instance);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          const contractInstance = new web3Instance.eth.Contract(ContractABI, '0xa5dE248Dc33104D7B0A4F3D8f23ECf6592e95ffc');\n          setContract(contractInstance);\n        } catch (error) {\n          console.error('User denied account access');\n        }\n      } else {\n        console.error('Please install MetaMask extension');\n      }\n    };\n    initWeb3();\n  }, []);\n\n  // Function to fetch data from the smart contract\n  const fetchData = async () => {\n    if (contract) {\n      try {\n        const result = await contract.methods.getData().call();\n        setData(result);\n      } catch (error) {\n        console.error('Error fetching data from smart contract:', error);\n      }\n    }\n  };\n\n  // Function to set data on the smart contract\n  const setDataOnChain = async () => {\n    if (contract) {\n      try {\n        await contract.methods.setData('New Data').send({\n          from: web3.eth.defaultAccount\n        });\n        console.log('Data set successfully');\n      } catch (error) {\n        console.error('Error setting data on smart contract:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Blockchain App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchData,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Data from Smart Contract: \", data]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setDataOnChain,\n      children: \"Set Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"FArbwlNkVDJ231g5LcFHmRWcjBI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","ContractABI","jsxDEV","_jsxDEV","App","_s","web3","setWeb3","contract","setContract","data","setData","initWeb3","window","ethereum","web3Instance","enable","contractInstance","eth","Contract","error","console","fetchData","result","methods","getData","call","setDataOnChain","send","from","defaultAccount","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/shri/projects/blockchain-app/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport ContractABI from './SimpleStorage.json';\n\nconst App = () => {\n    const [web3, setWeb3] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        const initWeb3 = async () => {\n            if (window.ethereum) {\n                const web3Instance = new Web3(window.ethereum);\n                setWeb3(web3Instance);\n\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    const contractInstance = new web3Instance.eth.Contract(ContractABI, '0xa5dE248Dc33104D7B0A4F3D8f23ECf6592e95ffc');\n                    setContract(contractInstance);\n                } catch (error) {\n                    console.error('User denied account access');\n                }\n            } else {\n                console.error('Please install MetaMask extension');\n            }\n        };\n\n        initWeb3();\n    }, []);\n\n    // Function to fetch data from the smart contract\n    const fetchData = async () => {\n        if (contract) {\n            try {\n                const result = await contract.methods.getData().call();\n                setData(result);\n            } catch (error) {\n                console.error('Error fetching data from smart contract:', error);\n            }\n        }\n    };\n\n    // Function to set data on the smart contract\n    const setDataOnChain = async () => {\n        if (contract) {\n            try {\n                await contract.methods.setData('New Data').send({ from: web3.eth.defaultAccount });\n                console.log('Data set successfully');\n            } catch (error) {\n                console.error('Error setting data on smart contract:', error);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h1>Blockchain App</h1>\n            <button onClick={fetchData}>Fetch Data</button>\n            <p>Data from Smart Contract: {data}</p>\n            <button onClick={setDataOnChain}>Set Data</button>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}